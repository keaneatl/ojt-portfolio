---
interface Frontmatter {
  // Define frontmatter props here
  author: string;
  date: string;
  hours: number;
  task: string;
  slug: string;
}

const reports = await Astro.glob<Frontmatter>("../content/reports/*.md");
---

<div class="p-10">
  <h1 id="reports" class="text-4xl font-extrabold mb-5 text-center">Reports</h1>
  <!-- {
    reports
      .sort(
        (report, nextReport) =>
          Date.parse(report.frontmatter.date) -
          Date.parse(nextReport.frontmatter.date)
      )
      .forEach((report) => console.log(report.frontmatter.date))
  } -->
  <div class="grid gap-2 grid-flow-row md:grid-cols-6">
    {
      reports
        .sort(
          (report, nextReport) =>
            Date.parse(report.frontmatter.date) -
            Date.parse(nextReport.frontmatter.date)
        )
        .map((report, i) => (
          <div class="bg-transparent h-full flex flex-col justify-between items-start items=center flex-wrap">
            <a href={`reports/${report.frontmatter.slug}`} target="_blank">
              <div class="report cursor-pointer border-8 border-[#1A1A1A] rounded-lg hover:border-[#8B0000]">
                <div class="report-num h-40 w-full flex justify-center items-center text-7xl font-extrabold">
                  {i + 1}
                </div>
                <div class="report-date p-4 py-6 border-solid border-t-8 border-[#1A1A1A] text-2xl font-extrabold text-center">
                  {report.frontmatter.date}
                </div>
              </div>
            </a>
          </div>
        ))
    }
  </div>
</div>

<script>
  const reports = document.querySelectorAll("div.report");

  reports.forEach((report) => {
    report.addEventListener("mouseenter", (e) => {
      const r = e.target as HTMLElement;
      const children = r.children;

      for (let i = 0; i < children.length; i++) {
        const element = children[i];

        element.classList.toggle("text-[#8B0000]");
        element.classList.toggle("border-[#8B0000]");
      }
    });
    report.addEventListener("mouseleave", (e) => {
      const r = e.target as HTMLElement;
      const children = r.children;

      for (let i = 0; i < children.length; i++) {
        const element = children[i];

        element.classList.toggle("text-[#8B0000]");
        element.classList.toggle("border-[#8B0000]");
      }
    });
  });
</script>
